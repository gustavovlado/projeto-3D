<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Robux 3D Animado</title>
  <style>
    body, html {
      margin: 0; padding: 0; overflow: hidden;
      background: transparent;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/js/controls/OrbitControls.min.js"></script>
  <script>
    // Cena, câmera e renderizador
    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.set(0, 0, 5);

    const renderer = new THREE.WebGLRenderer({antialias:true, alpha:true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0); // fundo transparente
    document.body.appendChild(renderer.domElement);

    // Luzes
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    // Função para criar o shape do hexágono externo e furo hexagonal
    function createRobuxShape() {
      const outerRadius = 1;
      const innerRadius = 0.5;
      const shape = new THREE.Shape();

      // Hexágono externo
      for(let i = 0; i < 6; i++) {
        const angle_deg = 60 * i - 30;
        const angle_rad = Math.PI / 180 * angle_deg;
        const x = outerRadius * Math.cos(angle_rad);
        const y = outerRadius * Math.sin(angle_rad);
        if(i === 0) shape.moveTo(x, y);
        else shape.lineTo(x, y);
      }
      shape.closePath();

      // Furo hexagonal interno
      const hole = new THREE.Path();
      for(let i = 0; i < 6; i++) {
        const angle_deg = 60 * i - 30;
        const angle_rad = Math.PI / 180 * angle_deg;
        const x = innerRadius * Math.cos(angle_rad);
        const y = innerRadius * Math.sin(angle_rad);
        if(i === 0) hole.moveTo(x, y);
        else hole.lineTo(x, y);
      }
      hole.closePath();

      shape.holes.push(hole);

      return shape;
    }

    // Cria geometria extrudada
    const shape = createRobuxShape();
    const extrudeSettings = {
      steps: 1,
      depth: 0.2,
      bevelEnabled: true,
      bevelThickness: 0.05,
      bevelSize: 0.05,
      bevelSegments: 3
    };
    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);

    // Material dourado metálico fosco
    const material = new THREE.MeshStandardMaterial({
      color: 0xD4AF37,  // dourado
      metalness: 0.8,
      roughness: 0.4,
    });

    const robuxMesh = new THREE.Mesh(geometry, material);
    scene.add(robuxMesh);

    // Para centralizar melhor o mesh
    geometry.center();

    // Animação - rotação + flutuação suave
    let clock = new THREE.Clock();

    function animate() {
      requestAnimationFrame(animate);

      let elapsed = clock.getElapsedTime();

      // Rotação lenta (360° a cada 20s)
      robuxMesh.rotation.z = (elapsed / 20) * Math.PI * 2;

      // Flutuação vertical suave (subir e descer a cada 2s)
      robuxMesh.position.z = Math.sin((elapsed / 2) * Math.PI * 2) * 0.2;

      renderer.render(scene, camera);
    }

    animate();

    // Responsividade
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth/window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
